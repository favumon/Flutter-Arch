// Mocks generated by Mockito 5.0.7 from annotations
// in data/test/core/feature/api_error_handling/repositories/api_error_handler_repository_impl_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i8;

import 'package:connectivity/connectivity.dart' as _i3;
import 'package:core/error/failures.dart' as _i9;
import 'package:dartz/dartz.dart' as _i6;
import 'package:data/core/constants/api_endpoints.dart' as _i5;
import 'package:data/core/device/local_storage.dart' as _i4;
import 'package:data/core/remote_api.dart' as _i7;
import 'package:dio/src/dio.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: comment_references
// ignore_for_file: unnecessary_parenthesis

// ignore_for_file: prefer_const_constructors

// ignore_for_file: avoid_redundant_argument_values

class _FakeDio extends _i1.Fake implements _i2.Dio {}

class _FakeConnectivity extends _i1.Fake implements _i3.Connectivity {}

class _FakeLocalStorage extends _i1.Fake implements _i4.LocalStorage {}

class _FakeApiEndpoints extends _i1.Fake implements _i5.ApiEndpoints {}

class _FakeEither<L, R> extends _i1.Fake implements _i6.Either<L, R> {}

/// A class which mocks [RemoteApiImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockRemoteApiImpl extends _i1.Mock implements _i7.RemoteApiImpl {
  MockRemoteApiImpl() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Dio get dio =>
      (super.noSuchMethod(Invocation.getter(#dio), returnValue: _FakeDio())
          as _i2.Dio);
  @override
  _i2.Dio get tokenDio =>
      (super.noSuchMethod(Invocation.getter(#tokenDio), returnValue: _FakeDio())
          as _i2.Dio);
  @override
  _i3.Connectivity get connectivity =>
      (super.noSuchMethod(Invocation.getter(#connectivity),
          returnValue: _FakeConnectivity()) as _i3.Connectivity);
  @override
  _i4.LocalStorage get localStorage =>
      (super.noSuchMethod(Invocation.getter(#localStorage),
          returnValue: _FakeLocalStorage()) as _i4.LocalStorage);
  @override
  _i5.ApiEndpoints get apiEndpoints =>
      (super.noSuchMethod(Invocation.getter(#apiEndpoints),
          returnValue: _FakeApiEndpoints()) as _i5.ApiEndpoints);
  @override
  _i8.Stream<_i9.Failure> get networkErrorListner =>
      (super.noSuchMethod(Invocation.getter(#networkErrorListner),
          returnValue: Stream<_i9.Failure>.empty()) as _i8.Stream<_i9.Failure>);
  @override
  _i8.Future<_i6.Either<_i9.Failure, Map<String, dynamic>>> apiGet(String? path,
          {Map<String, dynamic>? queryParameters}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #apiGet, [path], {#queryParameters: queryParameters}),
              returnValue:
                  Future<_i6.Either<_i9.Failure, Map<String, dynamic>>>.value(
                      _FakeEither<_i9.Failure, Map<String, dynamic>>()))
          as _i8.Future<_i6.Either<_i9.Failure, Map<String, dynamic>>>);
  @override
  _i8.Future<_i6.Either<_i9.Failure, Map<String, dynamic>>> apiPost(
          String? path,
          {Map<String, dynamic>? queryParameters,
          dynamic data}) =>
      (super.noSuchMethod(
              Invocation.method(#apiPost, [
                path
              ], {
                #queryParameters: queryParameters,
                #data: data
              }),
              returnValue:
                  Future<_i6.Either<_i9.Failure, Map<String, dynamic>>>.value(
                      _FakeEither<_i9.Failure, Map<String, dynamic>>()))
          as _i8.Future<_i6.Either<_i9.Failure, Map<String, dynamic>>>);
}
