// Mocks generated by Mockito 5.0.7 from annotations
// in data/test/core/utils/dio_interceptors/token_interceptor_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i9;
import 'dart:math' as _i14;

import 'package:data/core/constants/api_endpoints.dart' as _i15;
import 'package:data/core/local_storage.dart' as _i8;
import 'package:dio/src/adapter.dart' as _i3;
import 'package:dio/src/cancel_token.dart' as _i11;
import 'package:dio/src/dio.dart' as _i10;
import 'package:dio/src/dio_error.dart' as _i12;
import 'package:dio/src/headers.dart' as _i7;
import 'package:dio/src/interceptor.dart' as _i5;
import 'package:dio/src/options.dart' as _i2;
import 'package:dio/src/redirect_record.dart' as _i13;
import 'package:dio/src/response.dart' as _i6;
import 'package:dio/src/transformer.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: comment_references
// ignore_for_file: unnecessary_parenthesis

// ignore_for_file: prefer_const_constructors

// ignore_for_file: avoid_redundant_argument_values

class _FakeBaseOptions extends _i1.Fake implements _i2.BaseOptions {}

class _FakeHttpClientAdapter extends _i1.Fake implements _i3.HttpClientAdapter {
}

class _FakeTransformer extends _i1.Fake implements _i4.Transformer {}

class _FakeInterceptors extends _i1.Fake implements _i5.Interceptors {}

class _FakeResponse<T> extends _i1.Fake implements _i6.Response<T> {}

class _FakeRequestOptions extends _i1.Fake implements _i2.RequestOptions {}

class _FakeInterceptorState<T> extends _i1.Fake
    implements _i5.InterceptorState<T> {}

class _FakeHeaders extends _i1.Fake implements _i7.Headers {}

class _FakeUri extends _i1.Fake implements Uri {}

class _FakeLock extends _i1.Fake implements _i5.Lock {}

class _FakeIterator<E> extends _i1.Fake implements Iterator<E> {}

class _FakeInterceptor extends _i1.Fake implements _i5.Interceptor {}

/// A class which mocks [LocalStorage].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocalStorage extends _i1.Mock implements _i8.LocalStorage {
  MockLocalStorage() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String? getString(String? key) =>
      (super.noSuchMethod(Invocation.method(#getString, [key])) as String?);
  @override
  _i9.Future<bool> saveString(String? key, String? value) =>
      (super.noSuchMethod(Invocation.method(#saveString, [key, value]),
          returnValue: Future<bool>.value(false)) as _i9.Future<bool>);
}

/// A class which mocks [Dio].
///
/// See the documentation for Mockito's code generation for more information.
class MockDio extends _i1.Mock implements _i10.Dio {
  MockDio() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.BaseOptions get options =>
      (super.noSuchMethod(Invocation.getter(#options),
          returnValue: _FakeBaseOptions()) as _i2.BaseOptions);
  @override
  set options(_i2.BaseOptions? _options) =>
      super.noSuchMethod(Invocation.setter(#options, _options),
          returnValueForMissingStub: null);
  @override
  _i3.HttpClientAdapter get httpClientAdapter =>
      (super.noSuchMethod(Invocation.getter(#httpClientAdapter),
          returnValue: _FakeHttpClientAdapter()) as _i3.HttpClientAdapter);
  @override
  set httpClientAdapter(_i3.HttpClientAdapter? _httpClientAdapter) => super
      .noSuchMethod(Invocation.setter(#httpClientAdapter, _httpClientAdapter),
          returnValueForMissingStub: null);
  @override
  _i4.Transformer get transformer =>
      (super.noSuchMethod(Invocation.getter(#transformer),
          returnValue: _FakeTransformer()) as _i4.Transformer);
  @override
  set transformer(_i4.Transformer? _transformer) =>
      super.noSuchMethod(Invocation.setter(#transformer, _transformer),
          returnValueForMissingStub: null);
  @override
  _i5.Interceptors get interceptors =>
      (super.noSuchMethod(Invocation.getter(#interceptors),
          returnValue: _FakeInterceptors()) as _i5.Interceptors);
  @override
  void close({bool? force = false}) =>
      super.noSuchMethod(Invocation.method(#close, [], {#force: force}),
          returnValueForMissingStub: null);
  @override
  _i9.Future<_i6.Response<T>> get<T>(String? path,
          {Map<String, dynamic>? queryParameters,
          _i2.Options? options,
          _i11.CancelToken? cancelToken,
          _i2.ProgressCallback? onReceiveProgress}) =>
      (super.noSuchMethod(
              Invocation.method(#get, [
                path
              ], {
                #queryParameters: queryParameters,
                #options: options,
                #cancelToken: cancelToken,
                #onReceiveProgress: onReceiveProgress
              }),
              returnValue: Future<_i6.Response<T>>.value(_FakeResponse<T>()))
          as _i9.Future<_i6.Response<T>>);
  @override
  _i9.Future<_i6.Response<T>> getUri<T>(Uri? uri,
          {_i2.Options? options,
          _i11.CancelToken? cancelToken,
          _i2.ProgressCallback? onReceiveProgress}) =>
      (super.noSuchMethod(
              Invocation.method(#getUri, [
                uri
              ], {
                #options: options,
                #cancelToken: cancelToken,
                #onReceiveProgress: onReceiveProgress
              }),
              returnValue: Future<_i6.Response<T>>.value(_FakeResponse<T>()))
          as _i9.Future<_i6.Response<T>>);
  @override
  _i9.Future<_i6.Response<T>> post<T>(String? path,
          {dynamic data,
          Map<String, dynamic>? queryParameters,
          _i2.Options? options,
          _i11.CancelToken? cancelToken,
          _i2.ProgressCallback? onSendProgress,
          _i2.ProgressCallback? onReceiveProgress}) =>
      (super.noSuchMethod(
              Invocation.method(#post, [
                path
              ], {
                #data: data,
                #queryParameters: queryParameters,
                #options: options,
                #cancelToken: cancelToken,
                #onSendProgress: onSendProgress,
                #onReceiveProgress: onReceiveProgress
              }),
              returnValue: Future<_i6.Response<T>>.value(_FakeResponse<T>()))
          as _i9.Future<_i6.Response<T>>);
  @override
  _i9.Future<_i6.Response<T>> postUri<T>(Uri? uri,
          {dynamic data,
          _i2.Options? options,
          _i11.CancelToken? cancelToken,
          _i2.ProgressCallback? onSendProgress,
          _i2.ProgressCallback? onReceiveProgress}) =>
      (super.noSuchMethod(
              Invocation.method(#postUri, [
                uri
              ], {
                #data: data,
                #options: options,
                #cancelToken: cancelToken,
                #onSendProgress: onSendProgress,
                #onReceiveProgress: onReceiveProgress
              }),
              returnValue: Future<_i6.Response<T>>.value(_FakeResponse<T>()))
          as _i9.Future<_i6.Response<T>>);
  @override
  _i9.Future<_i6.Response<T>> put<T>(String? path,
          {dynamic data,
          Map<String, dynamic>? queryParameters,
          _i2.Options? options,
          _i11.CancelToken? cancelToken,
          _i2.ProgressCallback? onSendProgress,
          _i2.ProgressCallback? onReceiveProgress}) =>
      (super.noSuchMethod(
              Invocation.method(#put, [
                path
              ], {
                #data: data,
                #queryParameters: queryParameters,
                #options: options,
                #cancelToken: cancelToken,
                #onSendProgress: onSendProgress,
                #onReceiveProgress: onReceiveProgress
              }),
              returnValue: Future<_i6.Response<T>>.value(_FakeResponse<T>()))
          as _i9.Future<_i6.Response<T>>);
  @override
  _i9.Future<_i6.Response<T>> putUri<T>(Uri? uri,
          {dynamic data,
          _i2.Options? options,
          _i11.CancelToken? cancelToken,
          _i2.ProgressCallback? onSendProgress,
          _i2.ProgressCallback? onReceiveProgress}) =>
      (super.noSuchMethod(
              Invocation.method(#putUri, [
                uri
              ], {
                #data: data,
                #options: options,
                #cancelToken: cancelToken,
                #onSendProgress: onSendProgress,
                #onReceiveProgress: onReceiveProgress
              }),
              returnValue: Future<_i6.Response<T>>.value(_FakeResponse<T>()))
          as _i9.Future<_i6.Response<T>>);
  @override
  _i9.Future<_i6.Response<T>> head<T>(String? path,
          {dynamic data,
          Map<String, dynamic>? queryParameters,
          _i2.Options? options,
          _i11.CancelToken? cancelToken}) =>
      (super.noSuchMethod(
              Invocation.method(#head, [
                path
              ], {
                #data: data,
                #queryParameters: queryParameters,
                #options: options,
                #cancelToken: cancelToken
              }),
              returnValue: Future<_i6.Response<T>>.value(_FakeResponse<T>()))
          as _i9.Future<_i6.Response<T>>);
  @override
  _i9.Future<_i6.Response<T>> headUri<T>(Uri? uri,
          {dynamic data,
          _i2.Options? options,
          _i11.CancelToken? cancelToken}) =>
      (super.noSuchMethod(
              Invocation.method(#headUri, [uri],
                  {#data: data, #options: options, #cancelToken: cancelToken}),
              returnValue: Future<_i6.Response<T>>.value(_FakeResponse<T>()))
          as _i9.Future<_i6.Response<T>>);
  @override
  _i9.Future<_i6.Response<T>> delete<T>(String? path,
          {dynamic data,
          Map<String, dynamic>? queryParameters,
          _i2.Options? options,
          _i11.CancelToken? cancelToken}) =>
      (super.noSuchMethod(
              Invocation.method(#delete, [
                path
              ], {
                #data: data,
                #queryParameters: queryParameters,
                #options: options,
                #cancelToken: cancelToken
              }),
              returnValue: Future<_i6.Response<T>>.value(_FakeResponse<T>()))
          as _i9.Future<_i6.Response<T>>);
  @override
  _i9.Future<_i6.Response<T>> deleteUri<T>(Uri? uri,
          {dynamic data,
          _i2.Options? options,
          _i11.CancelToken? cancelToken}) =>
      (super.noSuchMethod(
              Invocation.method(#deleteUri, [uri],
                  {#data: data, #options: options, #cancelToken: cancelToken}),
              returnValue: Future<_i6.Response<T>>.value(_FakeResponse<T>()))
          as _i9.Future<_i6.Response<T>>);
  @override
  _i9.Future<_i6.Response<T>> patch<T>(String? path,
          {dynamic data,
          Map<String, dynamic>? queryParameters,
          _i2.Options? options,
          _i11.CancelToken? cancelToken,
          _i2.ProgressCallback? onSendProgress,
          _i2.ProgressCallback? onReceiveProgress}) =>
      (super.noSuchMethod(
              Invocation.method(#patch, [
                path
              ], {
                #data: data,
                #queryParameters: queryParameters,
                #options: options,
                #cancelToken: cancelToken,
                #onSendProgress: onSendProgress,
                #onReceiveProgress: onReceiveProgress
              }),
              returnValue: Future<_i6.Response<T>>.value(_FakeResponse<T>()))
          as _i9.Future<_i6.Response<T>>);
  @override
  _i9.Future<_i6.Response<T>> patchUri<T>(Uri? uri,
          {dynamic data,
          _i2.Options? options,
          _i11.CancelToken? cancelToken,
          _i2.ProgressCallback? onSendProgress,
          _i2.ProgressCallback? onReceiveProgress}) =>
      (super.noSuchMethod(
              Invocation.method(#patchUri, [
                uri
              ], {
                #data: data,
                #options: options,
                #cancelToken: cancelToken,
                #onSendProgress: onSendProgress,
                #onReceiveProgress: onReceiveProgress
              }),
              returnValue: Future<_i6.Response<T>>.value(_FakeResponse<T>()))
          as _i9.Future<_i6.Response<T>>);
  @override
  void lock() => super.noSuchMethod(Invocation.method(#lock, []),
      returnValueForMissingStub: null);
  @override
  void unlock() => super.noSuchMethod(Invocation.method(#unlock, []),
      returnValueForMissingStub: null);
  @override
  void clear() => super.noSuchMethod(Invocation.method(#clear, []),
      returnValueForMissingStub: null);
  @override
  _i9.Future<_i6.Response<dynamic>> download(String? urlPath, dynamic savePath,
          {_i2.ProgressCallback? onReceiveProgress,
          Map<String, dynamic>? queryParameters,
          _i11.CancelToken? cancelToken,
          bool? deleteOnError = true,
          String? lengthHeader = r'content-length',
          dynamic data,
          _i2.Options? options}) =>
      (super.noSuchMethod(
              Invocation.method(#download, [
                urlPath,
                savePath
              ], {
                #onReceiveProgress: onReceiveProgress,
                #queryParameters: queryParameters,
                #cancelToken: cancelToken,
                #deleteOnError: deleteOnError,
                #lengthHeader: lengthHeader,
                #data: data,
                #options: options
              }),
              returnValue:
                  Future<_i6.Response<dynamic>>.value(_FakeResponse<dynamic>()))
          as _i9.Future<_i6.Response<dynamic>>);
  @override
  _i9.Future<_i6.Response<dynamic>> downloadUri(Uri? uri, dynamic savePath,
          {_i2.ProgressCallback? onReceiveProgress,
          _i11.CancelToken? cancelToken,
          bool? deleteOnError = true,
          String? lengthHeader = r'content-length',
          dynamic data,
          _i2.Options? options}) =>
      (super.noSuchMethod(
              Invocation.method(#downloadUri, [
                uri,
                savePath
              ], {
                #onReceiveProgress: onReceiveProgress,
                #cancelToken: cancelToken,
                #deleteOnError: deleteOnError,
                #lengthHeader: lengthHeader,
                #data: data,
                #options: options
              }),
              returnValue:
                  Future<_i6.Response<dynamic>>.value(_FakeResponse<dynamic>()))
          as _i9.Future<_i6.Response<dynamic>>);
  @override
  _i9.Future<_i6.Response<T>> request<T>(String? path,
          {dynamic data,
          Map<String, dynamic>? queryParameters,
          _i11.CancelToken? cancelToken,
          _i2.Options? options,
          _i2.ProgressCallback? onSendProgress,
          _i2.ProgressCallback? onReceiveProgress}) =>
      (super.noSuchMethod(
              Invocation.method(#request, [
                path
              ], {
                #data: data,
                #queryParameters: queryParameters,
                #cancelToken: cancelToken,
                #options: options,
                #onSendProgress: onSendProgress,
                #onReceiveProgress: onReceiveProgress
              }),
              returnValue: Future<_i6.Response<T>>.value(_FakeResponse<T>()))
          as _i9.Future<_i6.Response<T>>);
  @override
  _i9.Future<_i6.Response<T>> requestUri<T>(Uri? uri,
          {dynamic data,
          _i11.CancelToken? cancelToken,
          _i2.Options? options,
          _i2.ProgressCallback? onSendProgress,
          _i2.ProgressCallback? onReceiveProgress}) =>
      (super.noSuchMethod(
              Invocation.method(#requestUri, [
                uri
              ], {
                #data: data,
                #cancelToken: cancelToken,
                #options: options,
                #onSendProgress: onSendProgress,
                #onReceiveProgress: onReceiveProgress
              }),
              returnValue: Future<_i6.Response<T>>.value(_FakeResponse<T>()))
          as _i9.Future<_i6.Response<T>>);
  @override
  _i9.Future<_i6.Response<T>> fetch<T>(_i2.RequestOptions? requestOptions) =>
      (super.noSuchMethod(Invocation.method(#fetch, [requestOptions]),
              returnValue: Future<_i6.Response<T>>.value(_FakeResponse<T>()))
          as _i9.Future<_i6.Response<T>>);
}

/// A class which mocks [DioError].
///
/// See the documentation for Mockito's code generation for more information.
class MockDioError extends _i1.Mock implements _i12.DioError {
  MockDioError() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.RequestOptions get requestOptions =>
      (super.noSuchMethod(Invocation.getter(#requestOptions),
          returnValue: _FakeRequestOptions()) as _i2.RequestOptions);
  @override
  set requestOptions(_i2.RequestOptions? _requestOptions) =>
      super.noSuchMethod(Invocation.setter(#requestOptions, _requestOptions),
          returnValueForMissingStub: null);
  @override
  set response(_i6.Response<dynamic>? _response) =>
      super.noSuchMethod(Invocation.setter(#response, _response),
          returnValueForMissingStub: null);
  @override
  _i12.DioErrorType get type => (super.noSuchMethod(Invocation.getter(#type),
      returnValue: _i12.DioErrorType.connectTimeout) as _i12.DioErrorType);
  @override
  set type(_i12.DioErrorType? _type) =>
      super.noSuchMethod(Invocation.setter(#type, _type),
          returnValueForMissingStub: null);
  @override
  set error(dynamic _error) =>
      super.noSuchMethod(Invocation.setter(#error, _error),
          returnValueForMissingStub: null);
  @override
  set stackTrace(StackTrace? stack) =>
      super.noSuchMethod(Invocation.setter(#stackTrace, stack),
          returnValueForMissingStub: null);
  @override
  String get message =>
      (super.noSuchMethod(Invocation.getter(#message), returnValue: '')
          as String);
  @override
  String toString() =>
      (super.noSuchMethod(Invocation.method(#toString, []), returnValue: '')
          as String);
}

/// A class which mocks [ErrorInterceptorHandler].
///
/// See the documentation for Mockito's code generation for more information.
class MockErrorInterceptorHandler extends _i1.Mock
    implements _i5.ErrorInterceptorHandler {
  MockErrorInterceptorHandler() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.Future<_i5.InterceptorState<dynamic>> get future =>
      (super.noSuchMethod(Invocation.getter(#future),
              returnValue: Future<_i5.InterceptorState<dynamic>>.value(
                  _FakeInterceptorState<dynamic>()))
          as _i9.Future<_i5.InterceptorState<dynamic>>);
  @override
  bool get isCompleted =>
      (super.noSuchMethod(Invocation.getter(#isCompleted), returnValue: false)
          as bool);
  @override
  void next(_i12.DioError? err) =>
      super.noSuchMethod(Invocation.method(#next, [err]),
          returnValueForMissingStub: null);
  @override
  void resolve(_i6.Response<dynamic>? response) =>
      super.noSuchMethod(Invocation.method(#resolve, [response]),
          returnValueForMissingStub: null);
  @override
  void reject(_i12.DioError? error) =>
      super.noSuchMethod(Invocation.method(#reject, [error]),
          returnValueForMissingStub: null);
}

/// A class which mocks [Response].
///
/// See the documentation for Mockito's code generation for more information.
class MockResponse<T> extends _i1.Mock implements _i6.Response<T> {
  MockResponse() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set data(T? _data) => super.noSuchMethod(Invocation.setter(#data, _data),
      returnValueForMissingStub: null);
  @override
  _i7.Headers get headers => (super.noSuchMethod(Invocation.getter(#headers),
      returnValue: _FakeHeaders()) as _i7.Headers);
  @override
  set headers(_i7.Headers? _headers) =>
      super.noSuchMethod(Invocation.setter(#headers, _headers),
          returnValueForMissingStub: null);
  @override
  _i2.RequestOptions get requestOptions =>
      (super.noSuchMethod(Invocation.getter(#requestOptions),
          returnValue: _FakeRequestOptions()) as _i2.RequestOptions);
  @override
  set requestOptions(_i2.RequestOptions? _requestOptions) =>
      super.noSuchMethod(Invocation.setter(#requestOptions, _requestOptions),
          returnValueForMissingStub: null);
  @override
  set statusCode(int? _statusCode) =>
      super.noSuchMethod(Invocation.setter(#statusCode, _statusCode),
          returnValueForMissingStub: null);
  @override
  set statusMessage(String? _statusMessage) =>
      super.noSuchMethod(Invocation.setter(#statusMessage, _statusMessage),
          returnValueForMissingStub: null);
  @override
  Map<String, dynamic> get extra =>
      (super.noSuchMethod(Invocation.getter(#extra),
          returnValue: <String, dynamic>{}) as Map<String, dynamic>);
  @override
  set extra(Map<String, dynamic>? _extra) =>
      super.noSuchMethod(Invocation.setter(#extra, _extra),
          returnValueForMissingStub: null);
  @override
  List<_i13.RedirectRecord> get redirects =>
      (super.noSuchMethod(Invocation.getter(#redirects),
          returnValue: <_i13.RedirectRecord>[]) as List<_i13.RedirectRecord>);
  @override
  set redirects(List<_i13.RedirectRecord>? _redirects) =>
      super.noSuchMethod(Invocation.setter(#redirects, _redirects),
          returnValueForMissingStub: null);
  @override
  set isRedirect(bool? _isRedirect) =>
      super.noSuchMethod(Invocation.setter(#isRedirect, _isRedirect),
          returnValueForMissingStub: null);
  @override
  Uri get realUri =>
      (super.noSuchMethod(Invocation.getter(#realUri), returnValue: _FakeUri())
          as Uri);
  @override
  String toString() =>
      (super.noSuchMethod(Invocation.method(#toString, []), returnValue: '')
          as String);
}

/// A class which mocks [RequestOptions].
///
/// See the documentation for Mockito's code generation for more information.
class MockRequestOptions extends _i1.Mock implements _i2.RequestOptions {
  MockRequestOptions() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set data(dynamic _data) => super.noSuchMethod(Invocation.setter(#data, _data),
      returnValueForMissingStub: null);
  @override
  String get path =>
      (super.noSuchMethod(Invocation.getter(#path), returnValue: '') as String);
  @override
  set path(String? _path) => super.noSuchMethod(Invocation.setter(#path, _path),
      returnValueForMissingStub: null);
  @override
  set cancelToken(_i11.CancelToken? _cancelToken) =>
      super.noSuchMethod(Invocation.setter(#cancelToken, _cancelToken),
          returnValueForMissingStub: null);
  @override
  set onReceiveProgress(_i2.ProgressCallback? _onReceiveProgress) => super
      .noSuchMethod(Invocation.setter(#onReceiveProgress, _onReceiveProgress),
          returnValueForMissingStub: null);
  @override
  set onSendProgress(_i2.ProgressCallback? _onSendProgress) =>
      super.noSuchMethod(Invocation.setter(#onSendProgress, _onSendProgress),
          returnValueForMissingStub: null);
  @override
  Uri get uri =>
      (super.noSuchMethod(Invocation.getter(#uri), returnValue: _FakeUri())
          as Uri);
  @override
  String get baseUrl =>
      (super.noSuchMethod(Invocation.getter(#baseUrl), returnValue: '')
          as String);
  @override
  set baseUrl(String? _baseUrl) =>
      super.noSuchMethod(Invocation.setter(#baseUrl, _baseUrl),
          returnValueForMissingStub: null);
  @override
  Map<String, dynamic> get queryParameters =>
      (super.noSuchMethod(Invocation.getter(#queryParameters),
          returnValue: <String, dynamic>{}) as Map<String, dynamic>);
  @override
  set queryParameters(Map<String, dynamic>? _queryParameters) =>
      super.noSuchMethod(Invocation.setter(#queryParameters, _queryParameters),
          returnValueForMissingStub: null);
  @override
  int get connectTimeout =>
      (super.noSuchMethod(Invocation.getter(#connectTimeout), returnValue: 0)
          as int);
  @override
  set connectTimeout(int? _connectTimeout) =>
      super.noSuchMethod(Invocation.setter(#connectTimeout, _connectTimeout),
          returnValueForMissingStub: null);
  @override
  String get method =>
      (super.noSuchMethod(Invocation.getter(#method), returnValue: '')
          as String);
  @override
  set method(String? _method) =>
      super.noSuchMethod(Invocation.setter(#method, _method),
          returnValueForMissingStub: null);
  @override
  int get sendTimeout =>
      (super.noSuchMethod(Invocation.getter(#sendTimeout), returnValue: 0)
          as int);
  @override
  set sendTimeout(int? _sendTimeout) =>
      super.noSuchMethod(Invocation.setter(#sendTimeout, _sendTimeout),
          returnValueForMissingStub: null);
  @override
  int get receiveTimeout =>
      (super.noSuchMethod(Invocation.getter(#receiveTimeout), returnValue: 0)
          as int);
  @override
  set receiveTimeout(int? _receiveTimeout) =>
      super.noSuchMethod(Invocation.setter(#receiveTimeout, _receiveTimeout),
          returnValueForMissingStub: null);
  @override
  _i2.ResponseType get responseType =>
      (super.noSuchMethod(Invocation.getter(#responseType),
          returnValue: _i2.ResponseType.json) as _i2.ResponseType);
  @override
  set responseType(_i2.ResponseType? _responseType) =>
      super.noSuchMethod(Invocation.setter(#responseType, _responseType),
          returnValueForMissingStub: null);
  @override
  _i2.ValidateStatus get validateStatus =>
      (super.noSuchMethod(Invocation.getter(#validateStatus),
          returnValue: (int? status) => false) as _i2.ValidateStatus);
  @override
  set validateStatus(_i2.ValidateStatus? _validateStatus) =>
      super.noSuchMethod(Invocation.setter(#validateStatus, _validateStatus),
          returnValueForMissingStub: null);
  @override
  bool get receiveDataWhenStatusError =>
      (super.noSuchMethod(Invocation.getter(#receiveDataWhenStatusError),
          returnValue: false) as bool);
  @override
  set receiveDataWhenStatusError(bool? _receiveDataWhenStatusError) =>
      super.noSuchMethod(
          Invocation.setter(
              #receiveDataWhenStatusError, _receiveDataWhenStatusError),
          returnValueForMissingStub: null);
  @override
  Map<String, dynamic> get extra =>
      (super.noSuchMethod(Invocation.getter(#extra),
          returnValue: <String, dynamic>{}) as Map<String, dynamic>);
  @override
  set extra(Map<String, dynamic>? _extra) =>
      super.noSuchMethod(Invocation.setter(#extra, _extra),
          returnValueForMissingStub: null);
  @override
  bool get followRedirects => (super
          .noSuchMethod(Invocation.getter(#followRedirects), returnValue: false)
      as bool);
  @override
  set followRedirects(bool? _followRedirects) =>
      super.noSuchMethod(Invocation.setter(#followRedirects, _followRedirects),
          returnValueForMissingStub: null);
  @override
  int get maxRedirects =>
      (super.noSuchMethod(Invocation.getter(#maxRedirects), returnValue: 0)
          as int);
  @override
  set maxRedirects(int? _maxRedirects) =>
      super.noSuchMethod(Invocation.setter(#maxRedirects, _maxRedirects),
          returnValueForMissingStub: null);
  @override
  set requestEncoder(_i2.RequestEncoder? _requestEncoder) =>
      super.noSuchMethod(Invocation.setter(#requestEncoder, _requestEncoder),
          returnValueForMissingStub: null);
  @override
  set responseDecoder(_i2.ResponseDecoder? _responseDecoder) =>
      super.noSuchMethod(Invocation.setter(#responseDecoder, _responseDecoder),
          returnValueForMissingStub: null);
  @override
  _i2.ListFormat get listFormat =>
      (super.noSuchMethod(Invocation.getter(#listFormat),
          returnValue: _i2.ListFormat.csv) as _i2.ListFormat);
  @override
  set listFormat(_i2.ListFormat? _listFormat) =>
      super.noSuchMethod(Invocation.setter(#listFormat, _listFormat),
          returnValueForMissingStub: null);
  @override
  Map<String, dynamic> get headers =>
      (super.noSuchMethod(Invocation.getter(#headers),
          returnValue: <String, dynamic>{}) as Map<String, dynamic>);
  @override
  set headers(Map<String, dynamic>? headers) =>
      super.noSuchMethod(Invocation.setter(#headers, headers),
          returnValueForMissingStub: null);
  @override
  set contentType(String? contentType) =>
      super.noSuchMethod(Invocation.setter(#contentType, contentType),
          returnValueForMissingStub: null);
  @override
  _i2.RequestOptions copyWith(
          {String? method,
          int? sendTimeout,
          int? receiveTimeout,
          int? connectTimeout,
          String? data,
          String? path,
          Map<String, dynamic>? queryParameters,
          String? baseUrl,
          _i2.ProgressCallback? onReceiveProgress,
          _i2.ProgressCallback? onSendProgress,
          _i11.CancelToken? cancelToken,
          Map<String, dynamic>? extra,
          Map<String, dynamic>? headers,
          _i2.ResponseType? responseType,
          String? contentType,
          _i2.ValidateStatus? validateStatus,
          bool? receiveDataWhenStatusError,
          bool? followRedirects,
          int? maxRedirects,
          _i2.RequestEncoder? requestEncoder,
          _i2.ResponseDecoder? responseDecoder,
          _i2.ListFormat? listFormat,
          bool? setRequestContentTypeWhenNoPayload}) =>
      (super.noSuchMethod(
          Invocation.method(#copyWith, [], {
            #method: method,
            #sendTimeout: sendTimeout,
            #receiveTimeout: receiveTimeout,
            #connectTimeout: connectTimeout,
            #data: data,
            #path: path,
            #queryParameters: queryParameters,
            #baseUrl: baseUrl,
            #onReceiveProgress: onReceiveProgress,
            #onSendProgress: onSendProgress,
            #cancelToken: cancelToken,
            #extra: extra,
            #headers: headers,
            #responseType: responseType,
            #contentType: contentType,
            #validateStatus: validateStatus,
            #receiveDataWhenStatusError: receiveDataWhenStatusError,
            #followRedirects: followRedirects,
            #maxRedirects: maxRedirects,
            #requestEncoder: requestEncoder,
            #responseDecoder: responseDecoder,
            #listFormat: listFormat,
            #setRequestContentTypeWhenNoPayload:
                setRequestContentTypeWhenNoPayload
          }),
          returnValue: _FakeRequestOptions()) as _i2.RequestOptions);
}

/// A class which mocks [Interceptors].
///
/// See the documentation for Mockito's code generation for more information.
class MockInterceptors extends _i1.Mock implements _i5.Interceptors {
  MockInterceptors() {
    _i1.throwOnMissingStub(this);
  }

  @override
  int get length =>
      (super.noSuchMethod(Invocation.getter(#length), returnValue: 0) as int);
  @override
  set length(int? _length) =>
      super.noSuchMethod(Invocation.setter(#length, _length),
          returnValueForMissingStub: null);
  @override
  _i5.Lock get requestLock =>
      (super.noSuchMethod(Invocation.getter(#requestLock),
          returnValue: _FakeLock()) as _i5.Lock);
  @override
  _i5.Lock get responseLock =>
      (super.noSuchMethod(Invocation.getter(#responseLock),
          returnValue: _FakeLock()) as _i5.Lock);
  @override
  _i5.Lock get errorLock => (super.noSuchMethod(Invocation.getter(#errorLock),
      returnValue: _FakeLock()) as _i5.Lock);
  @override
  Iterator<_i5.Interceptor> get iterator =>
      (super.noSuchMethod(Invocation.getter(#iterator),
              returnValue: _FakeIterator<_i5.Interceptor>())
          as Iterator<_i5.Interceptor>);
  @override
  bool get isEmpty =>
      (super.noSuchMethod(Invocation.getter(#isEmpty), returnValue: false)
          as bool);
  @override
  bool get isNotEmpty =>
      (super.noSuchMethod(Invocation.getter(#isNotEmpty), returnValue: false)
          as bool);
  @override
  _i5.Interceptor get first => (super.noSuchMethod(Invocation.getter(#first),
      returnValue: _FakeInterceptor()) as _i5.Interceptor);
  @override
  set first(_i5.Interceptor? value) =>
      super.noSuchMethod(Invocation.setter(#first, value),
          returnValueForMissingStub: null);
  @override
  _i5.Interceptor get last => (super.noSuchMethod(Invocation.getter(#last),
      returnValue: _FakeInterceptor()) as _i5.Interceptor);
  @override
  set last(_i5.Interceptor? value) =>
      super.noSuchMethod(Invocation.setter(#last, value),
          returnValueForMissingStub: null);
  @override
  _i5.Interceptor get single => (super.noSuchMethod(Invocation.getter(#single),
      returnValue: _FakeInterceptor()) as _i5.Interceptor);
  @override
  Iterable<_i5.Interceptor> get reversed =>
      (super.noSuchMethod(Invocation.getter(#reversed), returnValue: [])
          as Iterable<_i5.Interceptor>);
  @override
  _i5.Interceptor operator [](int? index) =>
      (super.noSuchMethod(Invocation.method(#[], [index]),
          returnValue: _FakeInterceptor()) as _i5.Interceptor);
  @override
  void operator []=(int? index, _i5.Interceptor? value) =>
      super.noSuchMethod(Invocation.method(#[]=, [index, value]),
          returnValueForMissingStub: null);
  @override
  _i5.Interceptor elementAt(int? index) =>
      (super.noSuchMethod(Invocation.method(#elementAt, [index]),
          returnValue: _FakeInterceptor()) as _i5.Interceptor);
  @override
  Iterable<_i5.Interceptor> followedBy(Iterable<_i5.Interceptor>? other) =>
      (super.noSuchMethod(Invocation.method(#followedBy, [other]),
          returnValue: []) as Iterable<_i5.Interceptor>);
  @override
  void forEach(void Function(_i5.Interceptor)? action) =>
      super.noSuchMethod(Invocation.method(#forEach, [action]),
          returnValueForMissingStub: null);
  @override
  bool contains(Object? element) =>
      (super.noSuchMethod(Invocation.method(#contains, [element]),
          returnValue: false) as bool);
  @override
  bool every(bool Function(_i5.Interceptor)? test) =>
      (super.noSuchMethod(Invocation.method(#every, [test]), returnValue: false)
          as bool);
  @override
  bool any(bool Function(_i5.Interceptor)? test) =>
      (super.noSuchMethod(Invocation.method(#any, [test]), returnValue: false)
          as bool);
  @override
  _i5.Interceptor firstWhere(bool Function(_i5.Interceptor)? test,
          {_i5.Interceptor Function()? orElse}) =>
      (super.noSuchMethod(
          Invocation.method(#firstWhere, [test], {#orElse: orElse}),
          returnValue: _FakeInterceptor()) as _i5.Interceptor);
  @override
  _i5.Interceptor lastWhere(bool Function(_i5.Interceptor)? test,
          {_i5.Interceptor Function()? orElse}) =>
      (super.noSuchMethod(
          Invocation.method(#lastWhere, [test], {#orElse: orElse}),
          returnValue: _FakeInterceptor()) as _i5.Interceptor);
  @override
  _i5.Interceptor singleWhere(bool Function(_i5.Interceptor)? test,
          {_i5.Interceptor Function()? orElse}) =>
      (super.noSuchMethod(
          Invocation.method(#singleWhere, [test], {#orElse: orElse}),
          returnValue: _FakeInterceptor()) as _i5.Interceptor);
  @override
  String join([String? separator = r'']) => (super
          .noSuchMethod(Invocation.method(#join, [separator]), returnValue: '')
      as String);
  @override
  Iterable<_i5.Interceptor> where(bool Function(_i5.Interceptor)? test) =>
      (super.noSuchMethod(Invocation.method(#where, [test]), returnValue: [])
          as Iterable<_i5.Interceptor>);
  @override
  Iterable<T> whereType<T>() =>
      (super.noSuchMethod(Invocation.method(#whereType, []), returnValue: [])
          as Iterable<T>);
  @override
  Iterable<T> map<T>(T Function(_i5.Interceptor)? f) =>
      (super.noSuchMethod(Invocation.method(#map, [f]), returnValue: [])
          as Iterable<T>);
  @override
  Iterable<T> expand<T>(Iterable<T> Function(_i5.Interceptor)? f) =>
      (super.noSuchMethod(Invocation.method(#expand, [f]), returnValue: [])
          as Iterable<T>);
  @override
  _i5.Interceptor reduce(
          _i5.Interceptor Function(_i5.Interceptor, _i5.Interceptor)?
              combine) =>
      (super.noSuchMethod(Invocation.method(#reduce, [combine]),
          returnValue: _FakeInterceptor()) as _i5.Interceptor);
  @override
  T fold<T>(T? initialValue, T Function(T, _i5.Interceptor)? combine) =>
      (super.noSuchMethod(Invocation.method(#fold, [initialValue, combine]),
          returnValue: null) as T);
  @override
  Iterable<_i5.Interceptor> skip(int? count) =>
      (super.noSuchMethod(Invocation.method(#skip, [count]), returnValue: [])
          as Iterable<_i5.Interceptor>);
  @override
  Iterable<_i5.Interceptor> skipWhile(bool Function(_i5.Interceptor)? test) =>
      (super.noSuchMethod(Invocation.method(#skipWhile, [test]),
          returnValue: []) as Iterable<_i5.Interceptor>);
  @override
  Iterable<_i5.Interceptor> take(int? count) =>
      (super.noSuchMethod(Invocation.method(#take, [count]), returnValue: [])
          as Iterable<_i5.Interceptor>);
  @override
  Iterable<_i5.Interceptor> takeWhile(bool Function(_i5.Interceptor)? test) =>
      (super.noSuchMethod(Invocation.method(#takeWhile, [test]),
          returnValue: []) as Iterable<_i5.Interceptor>);
  @override
  List<_i5.Interceptor> toList({bool? growable = true}) =>
      (super.noSuchMethod(Invocation.method(#toList, [], {#growable: growable}),
          returnValue: <_i5.Interceptor>[]) as List<_i5.Interceptor>);
  @override
  Set<_i5.Interceptor> toSet() =>
      (super.noSuchMethod(Invocation.method(#toSet, []),
          returnValue: <_i5.Interceptor>{}) as Set<_i5.Interceptor>);
  @override
  void add(_i5.Interceptor? element) =>
      super.noSuchMethod(Invocation.method(#add, [element]),
          returnValueForMissingStub: null);
  @override
  void addAll(Iterable<_i5.Interceptor>? iterable) =>
      super.noSuchMethod(Invocation.method(#addAll, [iterable]),
          returnValueForMissingStub: null);
  @override
  bool remove(Object? element) =>
      (super.noSuchMethod(Invocation.method(#remove, [element]),
          returnValue: false) as bool);
  @override
  void removeWhere(bool Function(_i5.Interceptor)? test) =>
      super.noSuchMethod(Invocation.method(#removeWhere, [test]),
          returnValueForMissingStub: null);
  @override
  void retainWhere(bool Function(_i5.Interceptor)? test) =>
      super.noSuchMethod(Invocation.method(#retainWhere, [test]),
          returnValueForMissingStub: null);
  @override
  void clear() => super.noSuchMethod(Invocation.method(#clear, []),
      returnValueForMissingStub: null);
  @override
  List<R> cast<R>() =>
      (super.noSuchMethod(Invocation.method(#cast, []), returnValue: <R>[])
          as List<R>);
  @override
  _i5.Interceptor removeLast() =>
      (super.noSuchMethod(Invocation.method(#removeLast, []),
          returnValue: _FakeInterceptor()) as _i5.Interceptor);
  @override
  void sort([int Function(_i5.Interceptor, _i5.Interceptor)? compare]) =>
      super.noSuchMethod(Invocation.method(#sort, [compare]),
          returnValueForMissingStub: null);
  @override
  void shuffle([_i14.Random? random]) =>
      super.noSuchMethod(Invocation.method(#shuffle, [random]),
          returnValueForMissingStub: null);
  @override
  Map<int, _i5.Interceptor> asMap() =>
      (super.noSuchMethod(Invocation.method(#asMap, []),
          returnValue: <int, _i5.Interceptor>{}) as Map<int, _i5.Interceptor>);
  @override
  List<_i5.Interceptor> operator +(List<_i5.Interceptor>? other) =>
      (super.noSuchMethod(Invocation.method(#+, [other]),
          returnValue: <_i5.Interceptor>[]) as List<_i5.Interceptor>);
  @override
  List<_i5.Interceptor> sublist(int? start, [int? end]) =>
      (super.noSuchMethod(Invocation.method(#sublist, [start, end]),
          returnValue: <_i5.Interceptor>[]) as List<_i5.Interceptor>);
  @override
  Iterable<_i5.Interceptor> getRange(int? start, int? end) =>
      (super.noSuchMethod(Invocation.method(#getRange, [start, end]),
          returnValue: []) as Iterable<_i5.Interceptor>);
  @override
  void removeRange(int? start, int? end) =>
      super.noSuchMethod(Invocation.method(#removeRange, [start, end]),
          returnValueForMissingStub: null);
  @override
  void fillRange(int? start, int? end, [_i5.Interceptor? fill]) =>
      super.noSuchMethod(Invocation.method(#fillRange, [start, end, fill]),
          returnValueForMissingStub: null);
  @override
  void setRange(int? start, int? end, Iterable<_i5.Interceptor>? iterable,
          [int? skipCount = 0]) =>
      super.noSuchMethod(
          Invocation.method(#setRange, [start, end, iterable, skipCount]),
          returnValueForMissingStub: null);
  @override
  void replaceRange(
          int? start, int? end, Iterable<_i5.Interceptor>? newContents) =>
      super.noSuchMethod(
          Invocation.method(#replaceRange, [start, end, newContents]),
          returnValueForMissingStub: null);
  @override
  int indexOf(Object? element, [int? start = 0]) =>
      (super.noSuchMethod(Invocation.method(#indexOf, [element, start]),
          returnValue: 0) as int);
  @override
  int indexWhere(bool Function(_i5.Interceptor)? test, [int? start = 0]) =>
      (super.noSuchMethod(Invocation.method(#indexWhere, [test, start]),
          returnValue: 0) as int);
  @override
  int lastIndexOf(Object? element, [int? start]) =>
      (super.noSuchMethod(Invocation.method(#lastIndexOf, [element, start]),
          returnValue: 0) as int);
  @override
  int lastIndexWhere(bool Function(_i5.Interceptor)? test, [int? start]) =>
      (super.noSuchMethod(Invocation.method(#lastIndexWhere, [test, start]),
          returnValue: 0) as int);
  @override
  void insert(int? index, _i5.Interceptor? element) =>
      super.noSuchMethod(Invocation.method(#insert, [index, element]),
          returnValueForMissingStub: null);
  @override
  _i5.Interceptor removeAt(int? index) =>
      (super.noSuchMethod(Invocation.method(#removeAt, [index]),
          returnValue: _FakeInterceptor()) as _i5.Interceptor);
  @override
  void insertAll(int? index, Iterable<_i5.Interceptor>? iterable) =>
      super.noSuchMethod(Invocation.method(#insertAll, [index, iterable]),
          returnValueForMissingStub: null);
  @override
  void setAll(int? index, Iterable<_i5.Interceptor>? iterable) =>
      super.noSuchMethod(Invocation.method(#setAll, [index, iterable]),
          returnValueForMissingStub: null);
  @override
  String toString() =>
      (super.noSuchMethod(Invocation.method(#toString, []), returnValue: '')
          as String);
}

/// A class which mocks [Lock].
///
/// See the documentation for Mockito's code generation for more information.
class MockLock extends _i1.Mock implements _i5.Lock {
  MockLock() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get locked =>
      (super.noSuchMethod(Invocation.getter(#locked), returnValue: false)
          as bool);
  @override
  void lock() => super.noSuchMethod(Invocation.method(#lock, []),
      returnValueForMissingStub: null);
  @override
  void unlock() => super.noSuchMethod(Invocation.method(#unlock, []),
      returnValueForMissingStub: null);
  @override
  void clear([String? msg = r'cancelled']) =>
      super.noSuchMethod(Invocation.method(#clear, [msg]),
          returnValueForMissingStub: null);
  @override
  _i9.Future<dynamic>? enqueue(_i5.EnqueueCallback? callback) =>
      (super.noSuchMethod(Invocation.method(#enqueue, [callback]))
          as _i9.Future<dynamic>?);
}

/// A class which mocks [ApiEndpoints].
///
/// See the documentation for Mockito's code generation for more information.
class MockApiEndpoints extends _i1.Mock implements _i15.ApiEndpoints {
  MockApiEndpoints() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get token =>
      (super.noSuchMethod(Invocation.getter(#token), returnValue: '')
          as String);
  @override
  set token(String? _token) =>
      super.noSuchMethod(Invocation.setter(#token, _token),
          returnValueForMissingStub: null);
  @override
  String get baseUrl =>
      (super.noSuchMethod(Invocation.getter(#baseUrl), returnValue: '')
          as String);
  @override
  set baseUrl(String? _baseUrl) =>
      super.noSuchMethod(Invocation.setter(#baseUrl, _baseUrl),
          returnValueForMissingStub: null);
  @override
  String get appsettings =>
      (super.noSuchMethod(Invocation.getter(#appsettings), returnValue: '')
          as String);
  @override
  set appsettings(String? _appsettings) =>
      super.noSuchMethod(Invocation.setter(#appsettings, _appsettings),
          returnValueForMissingStub: null);
}
